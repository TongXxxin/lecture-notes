Mind Map generated by NB MindMap plugin   
> __version__=`1.1`,showJumps=`true`
---

# Node\.js

## Global/全局
> collapsed=`true`

- LINK
<pre>http://www.runoob.com/nodejs/nodejs-global-object.html</pre>
- NOTE
<pre>&#27983;&#35272;&#22120; JavaScript &#20013; window &#26159;&#20840;&#23616;&#23545;&#35937;&#65292;
Node.js &#20013;&#30340;&#20840;&#23616;&#23545;&#35937;&#26159; global</pre>

### console
> collapsed=`true`


#### console\.log\(\[data\]\[, \.\.\.\]\)

#### 进阶
> collapsed=`true`


##### console\.info\(\[data\]\[, \.\.\.\]\)
> collapsed=`true`,fillColor=`#30BE41`


##### console\.error\(\[data\]\[, \.\.\.\]\)
> collapsed=`true`,fillColor=`#30BE41`


##### console\.warn\(\[data\]\[, \.\.\.\]\)
> collapsed=`true`,fillColor=`#30BE41`


##### console\.dir\(obj\[, options\]\)

##### console\.time\(label\)

##### console\.trace\(message\[, \.\.\.\]\)
> fillColor=`#30BE41`


##### console\.assert\(value\[, message\]\[, \.\.\.\]\)

### setTimeout\(cb, ms\)
- TOPIC
<pre>16034DEE4B3A</pre>

### clearTimeout\(t\)
> topicLinkUID=`16034DEE4B3A`


### setInterval\(cb, ms\)

### 进阶
> collapsed=`true`


#### \_\_dirname

#### \_\_filename

#### process

##### 事件
> collapsed=`true`


###### exit
> fillColor=`#30BE41`


####### process\.on\('exit', function\(code\)\{\}\)
> fillColor=`#30BE41`


###### beforeExit
> topicLinkUID=`160350CD62BA`


###### uncaughtException

###### Signal 事件

##### 属性
> collapsed=`true`


###### stdout

###### stderr

###### stdin

###### argv
> fillColor=`#30BE41`


####### \['node','脚本名','其它参数'\.\.\.\]
> fillColor=`#30BE41`


###### execPath

####### 前脚本的 Node 二进制文件的绝对路径

###### execArgv

###### env

###### exitCode

###### version

###### versions

###### config

###### pid
> fillColor=`#30BE41`


####### 进程号
> fillColor=`#30BE41`


###### title

####### 进程名，默认值为"node"，可以自定义该值。

###### arch

####### CPU 的架构：'arm'、'ia32' 或者 'x64'

###### platform

####### 平台系统 'darwin', 'freebsd', 'linux', 'sunos' 或 'win32'

###### mainModule

##### 方法
> collapsed=`true`


###### abort\(\)

###### chdir\(directory\)

####### 改变当前工作进程的目录，如果操作失败抛出异常。

###### cwd\(\)

####### 返回当前进程的工作目录

###### exit\(\[code\]\)
> fillColor=`#FFBD1C`


####### 使用指定的 code 结束进程。如果忽略，将会使用 code 0。

###### getgid\(\)

###### setgid\(id\)

###### getuid\(\)

###### setuid\(id\)

###### getgroups\(\)

###### setgroups\(groups\)

###### initgroups\(user, extra\_group\)

###### kill\(pid\[, signal\]\)
> fillColor=`#30BE41`


####### 发送信号给进程\. pid 是进程id，并且 signal 是发送的信号的字符串描述。信号名是字符串，比如 'SIGINT' 或 'SIGHUP'。如果忽略，信号会是 'SIGTERM'。

###### memoryUsage\(\)
> fillColor=`#30BE41`


####### 返回一个对象，描述了 Node 进程所用的内存状况，单位为字节。

###### nextTick\(callback\)

###### umask\(\[mask\]\)

###### uptime\(\)
> fillColor=`#FFBD1C`


####### 返回 Node 已经运行的秒数。

###### hrtime\(\)
> fillColor=`#FFBD1C`


####### \[seconds, nanoseconds\]数组<br/>与日期无关<br/>主要用途是可以通过精确的时间间隔，来衡量程序的性能。

## Buffer
- FILE
<pre>node-deep_study/buffer/buffer.js</pre>
- LINK
<pre>https://nodejs.org/api/buffer.html</pre>

## Core Modules/核心模块

### events
- FILE
<pre>node-deep_study/events_drive_loop.md</pre>

#### EventEmitter
> collapsed=`true`


##### new EventEmitter\(\)

###### on\(event, listener\)

####### 从循环，收到event

###### emit\(event, \[arg1\], \[arg2\], \[\.\.\.\]\)

####### 发送event，到循环

###### addListener\(event, listener\)

####### 循环里添加event （监听器数组的尾部）

###### removeListener\(event, listener\)

####### 循环里移除event

###### 进阶

####### once\(event, listener\)

####### removeAllListeners\(\[event\]\)

####### setMaxListeners\(n\)

######## 默认情况下， <br/>EventEmitters 如果你添加的监听器超过 10 个就会输出警告信息。 <br/>setMaxListeners 函数用于提高监听器的默认限制的数量。

####### listeners\(event\)

##### self EventEmitter

###### EventEmitter\.listenerCount\(emitter, event\)

###### \.on\('newListener',func\)

###### \.on\('removeListener',func\)

###### \.on\('error',func\)
- NOTE
<pre>EventEmitter &#23450;&#20041;&#20102;&#19968;&#20010;&#29305;&#27530;&#30340;&#20107;&#20214; error&#65292;
&#23427;&#21253;&#21547;&#20102;&#38169;&#35823;&#30340;&#35821;&#20041;&#65292;&#25105;&#20204;&#22312;&#36935;&#21040; &#24322;&#24120;&#30340;&#26102;&#20505;&#36890;&#24120;&#20250;&#35302;&#21457; error &#20107;&#20214;&#12290;

&#24403; error &#34987;&#35302;&#21457;&#26102;&#65292;EventEmitter &#35268;&#23450;&#22914;&#26524;&#27809;&#26377;&#21709; &#24212;&#30340;&#30417;&#21548;&#22120;&#65292;
Node.js &#20250;&#25226;&#23427;&#24403;&#20316;&#24322;&#24120;&#65292;&#36864;&#20986;&#31243;&#24207;&#24182;&#36755;&#20986;&#38169;&#35823;&#20449;&#24687;&#12290;

&#25105;&#20204;&#19968;&#33324;&#35201;&#20026;&#20250;&#35302;&#21457; error &#20107;&#20214;&#30340;&#23545;&#35937;&#35774;&#32622;&#30417;&#21548;&#22120;&#65292;&#36991;&#20813;&#36935;&#21040;&#38169;&#35823;&#21518;&#25972;&#20010;&#31243;&#24207;&#23849;&#28291;&#12290;</pre>

### 进阶

## 特性
> collapsed=`true`,leftSide=`true`


### 事件：别人执行它<br/>属性：你能知道它<br/>方法：你来执行它
> textColor=`#FF09E3`


### Node\.js 是单进程单线程应用程序，但是通过事件和回调支持并发

### API 都是异步的，<br/>作为一个独立线程运行，<br/>使用异步函数调用，处理并发。

### 事件机制<br/>观察者模式

### 单线程类似进入一个while\(true\)的事件循环<br/>直到没有事件观察者退出<br/>每个异步事件都生成一个事件观察者<br/>如果有事件发生就调用该回调函数\.

## 事件驱动程序
> leftSide=`true`

- FILE
<pre>node-deep_study/events_drive_loop.md</pre>
